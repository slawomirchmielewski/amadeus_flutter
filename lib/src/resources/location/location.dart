import 'package:freezed_annotation/freezed_annotation.dart';part 'location.freezed.dart';part 'location.g.dart';@freezedclass Location with _$Location {  @JsonSerializable(explicitToJson: true)  const factory Location({    required String? type,    required String? subType,    required String? name,    required String? detailedName,    required String? id,    required Self? self,    required String? timeZoneOffset,    required String? iataCode,    required GeoCode? geoCode,    required Address? address,    required Analytics? analytics,  }) = _Location;  factory Location.fromJson(Map<String, Object?> json) =>      _$LocationFromJson(json);}@freezedclass Self with _$Self {  const factory Self({    required String? href,    required List<String>? methods,  }) = _Self;  factory Self.fromJson(Map<String, Object?> json) => _$SelfFromJson(json);}@freezedclass GeoCode with _$GeoCode {  const factory GeoCode({    required double? latitude,    required double? longitude,  }) = _GeoCode;  factory GeoCode.fromJson(Map<String, Object?> json) =>      _$GeoCodeFromJson(json);}@freezedclass Address with _$Address {  const factory Address({    required String? cityName,    required String? cityCode,    required String? countryName,    required String? countryCode,    required String? stateCode,    required String? regionCode,  }) = _Address;  factory Address.fromJson(Map<String, Object?> json) =>      _$AddressFromJson(json);}@freezedclass Analytics with _$Analytics {  const factory Analytics({    required Travelers? travelers,  }) = _Analytics;  factory Analytics.fromJson(Map<String, Object?> json) =>      _$AnalyticsFromJson(json);}@freezedclass Travelers with _$Travelers {  const factory Travelers({    required int? score,  }) = _Travelers;  factory Travelers.fromJson(Map<String, Object?> json) =>      _$TravelersFromJson(json);}